Checking docstring for module:
>>> __import__('2-matrix_divided').__doc__ != None
True

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Check docstring for function:
>>> len(matrix_divided.__doc__) > 0
True

>>> matrix = [[1, 2, 3],[4, 5, 6]]

matrix divided by int:
>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

matrix divided by float:
>> matrix_divided(matrix, 1.2)
[[0.83, 1.67, 2.5], [3.33, 4.17, 5.0]]

matrix divided by a negative number:
>> matrix_divided(matrix, -1.2)
[[-0.83, -1.67, -2.5], [-3.33, -4.17, -5.0]]

print the old matrix:
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

matriz divided by infinity:
>>> print(matrix_divided(matrix, float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Division by scientific notation:
>>> print(matrix_divided(matrix, 1e2))
[[0.01, 0.02, 0.03], [0.04, 0.05, 0.06]]

Dividing by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

check type of matrix
>>> type(matrix_divided(matrix, 3))
<class 'list'>

matrix divide by other type diferent int o float:
>>> matrix_divided(matrix, "str")
Traceback (most recent call last):
...
TypeError: div must be a number


no passing arguments:
>>> matrix_divided()
Traceback (most recent call last):
        ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

passing less arguments
>>> matrix_divided(matrix)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'


passing more arguments
>>> matrix_divided(matrix, 2, 2)
Traceback (most recent call last):
...
TypeError: matrix_divided() takes 2 positional arguments but 3 were given

matrix with a type different of a list:
>>> matrix = None
>>> print(matrix_divided(matrix, 2))
Traceback (most recent call last):
        ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

list empty
>>> matrix = []
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix empty
>>> matrix = [[]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix empty
>>> matrix = [[], [], []]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing a col type str
>>> matrix = [["Hello", 2, 3],[4, 5, 6]]

>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [[1, 2, 3],[4, 5]]

passing matriz with rows of diferent size:
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

passing a matriX with two list diferent size, and div diferent to number:
>>> matrix_divided(matrix, "str")
Traceback (most recent call last):
...
TypeError: div must be a number

Passing matrix rows diferent long and element diferent int or float
>>> matrix = [[1, "str", 3],[4, 5]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

passing a tuple instead matrix
>>> matrix = (1 , 3, 4)
>>> matrix_divided (matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
